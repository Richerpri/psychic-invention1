// Include the necessary libraries
// iostream for input/output
// ctime and cstdlib for random number generation
// iomanip for controlling output formatting
// fstream for file input/output
// string for using string data type
// vector for using vector data type
// algorithm for using sort and max_element functions
// array for using array data type
#include <iostream>
#include <ctime>
#include <cstdlib>
#include <iomanip>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <array>

// Define constants for the game rules
// WIN_NUM1 and WIN_NUM2 are the numbers that result in a win on the first roll
// LOSE_NUM1, LOSE_NUM2, and LOSE_NUM3 are the numbers that result in a loss on the first roll
const int WIN_NUM1 = 7;
const int WIN_NUM2 = 11;
const int LOSE_NUM1 = 2;
const int LOSE_NUM2 = 3;
const int LOSE_NUM3 = 12;

// Function to simulate dice roll
// This function generates two random numbers between 1 and 6 (inclusive) and returns their sum.
// The random numbers represent the roll of two dice.
int rollDice() {
    // Generate a random number for the first die
    int die1 = rand() % 6 + 1;

    // Generate a random number for the second die
    int die2 = rand() % 6 + 1;

    // Return the sum of the two dice
    return die1 + die2;
}

// Function to print game rules
// This function prints the rules of the game to the console.
void printRules() {
    // Print a welcome message
    std::cout << "Welcome to the game of Craps!\n";

    // Print the game rules
    std::cout << "Here are the rules:\n";
    std::cout << "1. A player rolls two dice and adds up the numbers.\n";
    std::cout << "2. On the first roll, a total of " << WIN_NUM1 << " or " << WIN_NUM2 << " is a win, and a total of " << LOSE_NUM1 << ", " << LOSE_NUM2 << ", or " << LOSE_NUM3 << " is a loss.\n";
    std::cout << "3. Any other total becomes the player's 'point'.\n";
    std::cout << "4. The player continues to roll until they roll their point (a win) or a " << WIN_NUM1 << " (a loss).\n";

    // Print a message to start the game
    std::cout << "Let's get started!\n";
}

// Function to play one round of the game
// This function simulates one round of the game.
// It takes two integers by reference: 'point' and 'roll'.
// 'point' is the player's point. If it's 0, it means it's the player's first roll.
// 'roll' is the total number of the player's dice roll.
// The function returns a boolean indicating whether the player won the round.
bool playRound(int& point, int& roll) {
    // Initialize game over flag to false
    bool isGameOver = false;

    // Initialize player win flag to false
    bool didPlayerWin = false;

    // Start the round loop
    while (!isGameOver) {
        // Roll the dice
        roll = rollDice();

        // Print the result of the roll
        std::cout << "You rolled a " << roll << ".\n";

        // Check if it's the first roll
        if (point == 0) {
            // If it's the first roll, check the result
            switch (roll) {
                // If the roll is a win number, the player wins the round
                case WIN_NUM1:
                case WIN_NUM2:
                    std::cout << "You win this round!\n";
                    isGameOver = true;
                    didPlayerWin = true;
                    break;

                // If the roll is a lose number, the player loses the round
                case LOSE_NUM1:
                case LOSE_NUM2:
                case LOSE_NUM3:
                    std::cout << "You lose this round.\n";
                    isGameOver = true;
                    break;

                // If the roll is any other number, it becomes the player's point
                default:
                    point = roll;
                    std::cout << "Your point is " << point << ".\n";
                    break;
            }
        }
        // If it's not the first roll, check the result
        else {
            // If the roll is equal to the point, the player wins the round
            if (roll == point) {
                std::cout << "You win this round!\n";
                isGameOver = true;
                didPlayerWin = true;
            }
            // If the roll is a win number, the player loses the round
            else if (roll == WIN_NUM1) {
                std::cout << "You lose this round.\n";
                isGameOver = true;
            }
        }
    }

    // Return whether the player won the round
    return didPlayerWin;
}

// Function to print game statistics
// This function takes two integers: 'roundsPlayed' and 'roundsWon'.
// It prints the number of rounds played, the number of rounds won, and the win rate to the console.
void printStats(int roundsPlayed, int roundsWon) {
    // Print the number of rounds played
    std::cout << "You've played " << roundsPlayed << " rounds and won " << roundsWon << " of them.\n";

    // Calculate and print the win rate
    std::cout << "Your win rate is " << std::fixed << std::setprecision(2) << static_cast<float>(roundsWon) / roundsPlayed * 100 << "%.\n";
}

// Function to save stats to a file
// This function takes two integers: 'roundsPlayed' and 'roundsWon'.
// It writes these values to a file named "stats.txt".
void saveStats(int roundsPlayed, int roundsWon) {
    // Open the file for writing
    std::ofstream outFile("stats.txt");

    // Check if the file is open
    if (outFile.is_open()) {
        // Write the number of rounds played to the file
        outFile << roundsPlayed << "\n";

        // Write the number of rounds won to the file
        outFile << roundsWon << "\n";

        // Close the file
        outFile.close();
    } else {
        // Print an error message if the file couldn't be opened
        std::cout << "Unable to open file for writing.\n";
    }
}

// Function to load stats from a file
// This function takes two integers by reference: 'roundsPlayed' and 'roundsWon'.
// It reads these values from a file named "stats.txt".
void loadStats(int& roundsPlayed, int& roundsWon) {
    // Open the file for reading
    std::ifstream inFile("stats.txt");

    // Check if the file is open
    if (inFile.is_open()) {
        // Read the number of rounds played from the file
        inFile >> roundsPlayed;

        // Read the number of rounds won from the file
        inFile >> roundsWon;

        // Close the file
        inFile.close();
    } else {
        // Print an error message if the file couldn't be opened
        std::cout << "Unable to open file for reading.\n";
    }
}

// Function to print the results of each round
// This function takes an array of booleans and an integer.
// The boolean array 'results' contains the results of each round (true for a win, false for a loss).
// The integer 'roundsPlayed' is the number of rounds played.
// The function prints the result of each round to the console.
void printResults(const std::array<bool, 100>& results, int roundsPlayed) {
    // Print a header for the results
    std::cout << "Here are the results of your rounds:\n";

    // Loop through each round
    for (int i = 0; i < roundsPlayed; i++) {
        // Print the result of the round
        std::cout << "Round " << (i + 1) << ": " << (results[i] ? "Win" : "Loss") << "\n";
    }
}

// Main function
int main() {
    // Seed the random number generator
    // This is done to ensure that the random numbers generated by rand() are different each time the program is run
    srand(static_cast<unsigned int>(time(0)));

    // Declare a vector to store the scores of each player
    std::vector<int> scores;

    // Declare a variable to store the user's choice to play again
    char playAgain = 'y';

    // Start the game loop
    while (playAgain == 'y') {
        // Declare variables to store the number of rounds played, the number of rounds won, the player's point, and the dice roll
        int roundsPlayed = 0;
        int roundsWon = 0;
        int point = 0;
        int roll = 0;

        // Declare an array to store the results of each round
        std::array<bool, 100> results;

        // Load the stats from the file
        loadStats(roundsPlayed, roundsWon);

        // Print the game rules
        printRules();

        // Start the round loop
        while (roundsPlayed < 100) {
            // Play a round and store the result
            bool win = playRound(point, roll);
            results[roundsPlayed] = win;

            // Increment the number of rounds played
            roundsPlayed++;

            // If the player won the round, increment the number of rounds won
            if (win) {
                roundsWon++;
            }

            // Print the game stats
            printStats(roundsPlayed, roundsWon);

            // Ask the player if they want to play another round
            std::cout << "Would you like to play another round? (y/n): ";
            std::cin >> playAgain;

            // If the player doesn't want to play another round, break the loop
            if (playAgain != 'y') {
                break;
            }
        }

        // Print the results of each round
        printResults(results, roundsPlayed);

        // Save the stats to the file
        saveStats(roundsPlayed, roundsWon);

        // Store the player's score in the vector
        scores.push_back(roundsWon);

        // Ask if another player wants to play
        std::cout << "Would another player like to play? (y/n): ";
        std::cin >> playAgain;
    }

    // Sort the scores in descending order
    std::sort(scores.begin(), scores.end(), std::greater<int>());

    // Print the scores of each player
    std::cout << "Here are the scores of each player:\n";
    for (int i = 0; i < scores.size(); i++) {
        std::cout << "Player " << (i + 1) << ": " << scores[i] << "\n";
    }

    // Find and print the highest score
    int highestScore = *std::max_element(scores.begin(), scores.end());
    std::cout << "The highest score is: " << highestScore << "\n";

    // End of the program
    return 0;
}
